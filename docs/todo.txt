==================================
invalid extensions (todo find a new extension for them)
==================================
subscript of range, this performs mod but wrapped at 1 instead of 0
   it is currently remapped to divmod.
   I don't know of any available num num extensions, but things like -a+bc = --abc, but this would need to be aligned with a num list extension (which there are some available), because need to work for any type c. This would also probably break a lot of existing code (it could all be refactored though).

==================================

enhanced range creation, by overloading ops like take, drop, reverse, step, etc. nice defaults to consider, 0-n-1, 1-n, -n-n, step 1. need to be able to specify 3 of (from,to,step,count).
	ideally don't need vectorized + and * to facilitate this

some way to change automap / implicit map to a filter (follow with & ?) or maybe remove empties from list to_s?

improve auto map (like the case of $ and @ on separate lines
	generally consider all common cases
	alg idea: if not consume all input: auto map on any inputs that read last line.
	no default 100/1000/etc.

add an implicit arg and concat op if there is a "required" unused arg (like they did a drop take instead of a drop). Need a new class of usableness though

consider making implicit fold, be a fold with an initial identity value so it could work with + or *.

remove the extra separator added to lists when auto printing? is this actually useful or annoying? http://golf.shinh.org/p.rb?Separator td_?`~_+ /+_~"|" $

consider making - do something special in more fns

consider making ~~ or an unused arg in ~ mean that this tuple is now a nextState,nextValue pair (and need options to set initial state and what to do with result state)

handle tuples in special zips

multi rets like "take drop while" (with no single alt) should mark rets optional

values_at (zip =) should be O(n) by converting to array
index of zipped also, by converting to a hashmap first

move away from md5 so that there can be a more efficient way to find salt

extension collision tests
library/code links from quickref

fix coerce tuple with : and if/else
	generally think about tuple in stuff like the set ops/etc.

combine fns to clean up ops table (scan/fold, l1)
	can have multiple reps for same thing (i.e. string has shorter rep for join)

want non wrapped subscript auto option

cleaner compile.hs using a template file for the main
	use ops table with BOF and EOF for implicit ops, args, and auto map?

automap could be a bit smarter
	automap only only 2nd value if using 1st and 2nd
	not totally sensical if automapping on lines, but also using ints, i.e.
		echo asdf\\n123 | nibbles "p$ "\n" p@

better checking for commutative, taking into account what the code would be if swapping order with lets

debug features to add:
	gather rest of program
	show context values
	verbose literate mode (and/or print tree) (with arg names, types, desc, indentation, debruijn names)
	see parse tree
	could support parenthesis that do nothing but cause error if parse isn't as expected
	could support naming vars to not need DeBruijn indices in lit

maybe (2 possible versions, one that acts like id, one that acts like Nothing)
either instead of bool/maybe?

should have dependency bounds for dlist/etc (in cabal file?).

auto input types (for command line args, essentially read show form of any type, even tuples)

"non empty list" for many [VT] for type safer haskell implementation of static analysis

multipage quickref (coerce, base modes, etc) https://stackoverflow.com/questions/1664049/can-i-force-a-page-break-in-html-printing

website design art

infinity / handling div 0 errors/etc.

bounded integers/list size for more efficient math ops and no need for maybe on some list ops

interpreter in addition to compiler (auto build it?)

float/big decimal

memoize let rec

separate calculation of truthiness of ints for better lazy evaluation (and SmartList). i.e. max of a truthy int is truthy regardless of second arg, don't need to do the computation, but as it is, it would.


## Maybe
Currently nothing returns a maybe type, but there are plans to do so for some operations. These would behave like normal values except would behave like Haskell's `>>=` when nothing, and would overload `?` for handling the nothing case more easily. TODO implement and update this.
